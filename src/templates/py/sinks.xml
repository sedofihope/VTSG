<?xml version="1.0" standalone="no"?>
<!DOCTYPE sink SYSTEM "../dtd/sink.dtd">
    <sink>
        <!--
        <sample>
            <path>
                <dir></dir>
            </path>
            <flaw_type flaw_group=""></flaw_type>
            <comment></comment>
            <imports>
                <import></import>
            </imports>
            <code></code>
            <safety safe="" unsafe=""/>
            <input_type></input_type>
            <exec_type></exec_type>
        </sample>
        -->

        <sample>
            <path>
                <dir>ext_sys_ctl</dir>
            </path>
            <flaw_type flaw_group="Other">CWE15</flaw_type>
            <comment>sink: add directory named by input to Python module search path
&lt;&lt; POV
.
POV</comment>
            <imports>
		<import>sys</import>
            </imports>
            <code>
        if {{in_var_name}} is not None:
	INDENT
            {{flaw}} # no validation - concatenated value allows arbitrary execution
	    sys.path += [{{in_var_name}}]
	    print(f'added { {{in_var_name}} } to Python module search path')
	DEDENT

	print('Finished')
	    </code>
            <safety safe="" unsafe=""/>
            <input_type>string,filter_input</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>rel_path_trav</dir>
            </path>
            <flaw_type flaw_group="Other">CWE23</flaw_type>
            <comment>sink: open file named by input
&lt;&lt; POV
../etc/passwd
POV</comment>
            <imports>
                <import>os</import>
		<import>sys</import>
            </imports>
            <code>
	if sys.platform == 'linux':
	INDENT
	    root = '/home'
	DEDENT
	else:
	INDENT
	    # MacOS
	    root = '/Users'
	DEDENT

        if {{in_var_name}} is not None:
	INDENT
            {{flaw}} # no validation - concatenated value could have path traversal
	    file = os.path.join(root, {{in_var_name}})
	    with open(file, 'r') as f:
	    INDENT
	        print(f.readline(), end='')
	    DEDENT
	DEDENT

	print('Done')
	    </code>
            <safety safe="" unsafe=""/>
            <input_type>string,filter_input</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>file_exists</dir>
            </path>
            <flaw_type flaw_group="OWASP_a4">CWE22</flaw_type>
            <comment>sink: check if a file exists</comment>
            <imports>
                <import>os</import>
            </imports>
            <code>
        print(f'file "{ {{in_var_name}} }" ', end='')
        {{flaw}}
        if os.path.exists({{in_var_name}}):
	INDENT
            print('exists')
	DEDENT
	else:
	INDENT
            print('does not exist')
	DEDENT
	    </code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>ls</dir>
            </path>
            <flaw_type flaw_group="OWASP_a1">CWE78</flaw_type>
            <comment>sink: run ls in a dir</comment>
            <imports>
                <import>os</import>
            </imports>
            <code>
        {{flaw}}
        os.system('ls ' + {{in_var_name}})
            </code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>info_expose</dir>
            </path>
            <flaw_type flaw_group="OWASP_a5">CWE209</flaw_type>
            <comment>sink: information exposure</comment>
            <imports>
            </imports>
            <code>
	        # find a sum that the compiler won't predict
                intArray = sorted([2, 37, 849, 24, 42, -10, 93])
		for nb in intArray:
		INDENT
                    r = nb + 3
                    num = r / 10
                    sum = num + nb
                    print(f'Current sum: {sum}')
		DEDENT
                try:
		INDENT
                    a = 0
                    b = 1
		    # sum is a float, so range(sum) throws TypeError
                    for i in range(sum):
		    INDENT
		        (a, b) = (b, a + b)
		    DEDENT
                    print(f'{sum}th Fibonacci number is {a}')
		DEDENT
                except TypeError as te:
		INDENT
                    {{flaw}} # leaks value of sum
                    print(f'TypeError: {te}: for i in range({sum}):')
		DEDENT
            </code>
            <safety safe="0" unsafe="1"/>
            <input_type>none</input_type>
            <exec_type>none</exec_type>
            <options need_complexity="0"/>
        </sample>

        <sample>
            <path>
                <dir>unchecked_loopG</dir>
            </path>
            <flaw_type flaw_group="Other">CWE606</flaw_type>
            <comment>sink: loop condition from input - checked</comment>
            <imports>
            </imports>
            <code>
	        # convert input string to number
	        try:
		INDENT
	            number_of_loops = int({{in_var_name}})
		DEDENT
		except ValueError:
		INDENT
		    print('Invalid input.  Numeric input expected.  Assuming 1.')
		    number_of_loops = 1
		DEDENT

	        if number_of_loops >= 0 and number_of_loops &lt;= 5:
		INDENT
		    for j in range(number_of_loops):
		    INDENT
                        print('Hello, world')
		    DEDENT
		DEDENT
            </code>
            <safety safe="1" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>unchecked_loopB</dir>
            </path>
            <flaw_type flaw_group="Other">CWE606</flaw_type>
            <comment>sink: loop condition from input - unchecked</comment>
            <imports>
            </imports>
            <code>
	        # convert input string to number
	        try:
		INDENT
	            number_of_loops = int({{in_var_name}})
		DEDENT
		except ValueError:
		INDENT
		    print('Invalid input.  Numeric input expected.  Assuming 1.')
		    number_of_loops = 1
		DEDENT

                {{flaw}}
		for j in range(number_of_loops):
		INDENT
                    print('Hello, world')
		DEDENT
            </code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>div_zero</dir>
            </path>
            <flaw_type flaw_group="Exception">CWE369</flaw_type>
            <comment>sink: divide by input</comment>
            <imports>
            </imports>
            <code>
	        user_input = {{in_var_name}}
                {{flaw}}
                print(f'The reciprocal of {user_input} is {1/user_input}')
            </code>
            <safety safe="0" unsafe="0"/>
            <input_type>int</input_type>
            <exec_type>none</exec_type>
        </sample>
    </sink>
