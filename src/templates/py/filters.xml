<?xml version = "1.0" standalone="no"?>
<!DOCTYPE filtering SYSTEM "../dtd/filtering.dtd">
<!-- *modified "Thu Sep 12 12:06:19 2024" *by "Paul E. Black" -->
    <filtering>
        <!--
        <sample>
            <path>
                <dir></dir>
            </path>
            <comment>no </comment>
            <flaws>
                <flaw flaw_type="" safe="" unsafe=""/>
            </flaws>
            <imports></imports>
            <code></code>
            <input_type></input_type>
            <output_type></output_type>
        </sample>
-->

        <sample>
            <path>
                <dir>none</dir>
            </path>
            <comment>no filtering</comment>
            <flaws>
                <flaw flaw_type="default" safe="0" unsafe="0"/>
            </flaws>
            <imports></imports>
            <code>
        # No filtering (sanitization)
        {{out_var_name}} = {{in_var_name}}
            </code>
            <input_type>nofilter</input_type>
            <output_type>nofilter</output_type>
	    <options need_complexity="0" />
        </sample>

<!--
        <sample>
            <path>
                <dir>func_preg_match</dir>
                <dir>only_numbers</dir>
            </path>
            <comment>filtering : check if there is only numbers</comment>
            <flaws>
                <flaw flaw_type="CWE89" safe="1" unsafe="0"/>
                <flaw flaw_type="CWE78" safe="0" unsafe="0"/>
                <flaw flaw_type="CWE91" safe="0" unsafe="0"/>
                <flaw flaw_type="CWE90" safe="0" unsafe="0"/>
            </flaws>
            <imports>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <code>
                string pattern = @"/^[0-9]*$/";
                Regex r = new Regex(pattern);
                Match m = r.Match({{in_var_name}});
                if(!m.Success){
                    {{out_var_name}} = "";
                }else{
                    {{out_var_name}} = {{in_var_name}};
                }
            </code>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>
-->
        <sample>
            <path>
                <dir>cast</dir>
                <dir>string to integer</dir>
            </path>
            <comment>filtering : cast tainted into integer</comment>
            <flaws>
                <flaw flaw_type="CWE89" safe="1" unsafe="0"/>
                <flaw flaw_type="CWE78" safe="0" unsafe="0"/>
                <flaw flaw_type="CWE91" safe="0" unsafe="0"/>
                <flaw flaw_type="CWE90" safe="0" unsafe="0"/>
            </flaws>
            <imports>
            </imports>
            <code>
                {{out_var_name}} = int({{in_var_name}})
            </code>
            <input_type>string</input_type>
            <output_type>int</output_type>
        </sample>

        <sample>
            <path>
                <dir>nonzero</dir>
            </path>
            <comment>filter: block zero arguments</comment>
            <flaws>
                <flaw flaw_type="CWE369" safe="1" unsafe="0"/>
            </flaws>
            <imports>
	      <import>sys</import>
            </imports>
            <code>
	        if {{in_var_name}} == 0:
		INDENT
		    sys.exit("Zero input not allowed")
		DEDENT
		{{out_var_name}} = {{in_var_name}}
            </code>
            <input_type>int</input_type>
            <output_type>int</output_type>
        </sample>

        <sample>
            <path>
                <dir>nonneg</dir>
            </path>
            <comment>filter: block inputs less than 0</comment>
            <flaws>
                <flaw flaw_type="CWE129" safe="1" unsafe="0"/>
            </flaws>
            <imports>
	      <import>sys</import>
            </imports>
            <code>
	        if {{in_var_name}} &lt; 0:
		INDENT
		    sys.exit("Negative input not allowed")
		DEDENT
		{{out_var_name}} = {{in_var_name}}
            </code>
            <input_type>int</input_type>
            <output_type>int</output_type>
        </sample>

	<!-- source input is a filter so that it is wrapped with complexities -->
        <sample>
            <path>
                <dir>console_input</dir>
            </path>
            <comment>input (filter): stdin &lt;&lt; INPUT
../etc/passwd
INPUT</comment>
            <flaws>
                <flaw flaw_type="default" safe="0" unsafe="1"/> <!-- unsafe user input -->
            </flaws>
            <imports>
            </imports>
            <code>
                {{out_var_name}} = input() # read one line
            </code>
            <input_type>InitToNone</input_type>
            <output_type>string,filter_input</output_type>
        </sample>

        <sample>
            <path>
                <dir>env</dir>
            </path>
            <comment>input (filter): environment variable ADD &lt;&lt; INPUT
../etc/passwd
INPUT</comment>
            <flaws>
                <flaw flaw_type="default" safe="0" unsafe="1"/> <!-- unsafe user input -->
            </flaws>
            <imports>
                <import>os</import>
            </imports>
            <code>
	        {{out_var_name}} = os.environ['ADD']
            </code>
            <input_type>InitToNone</input_type>
            <output_type>string,filter_input</output_type>
        </sample>

        <sample>
            <path>
                <dir>file</dir>
            </path>
            <comment>input (filter): file data.txt</comment>
            <flaws>
                <flaw flaw_type="default" safe="0" unsafe="1"/> <!-- unsafe user input -->
            </flaws>
            <imports>
            </imports>
            <code>
	    with open('data.txt', 'r') as f:
	    INDENT
                {{out_var_name}} = f.readline().rstrip() # read one line, remove newline
	    DEDENT
            </code>
            <input_type>InitToNone</input_type>
            <output_type>string,filter_input</output_type>
        </sample>


    <!-- Kendra Kratkiewicz examples -->
        <sample>
            <path>
                <dir>ok</dir>
            </path>
            <comment>filter out invalid input</comment>
            <flaws>
                <flaw flaw_type="KK" safe="1" unsafe=""/>
            </flaws>
            <imports>
              <import>sys</import>
            </imports>
            <code>
	      if {{in_var_name}} &lt; 0 or {{in_var_name}} &gt; 9:
	      INDENT
	          print('Bad value')
	          sys.exit(0)
	      DEDENT
	      {{out_var_name}} = {{in_var_name}}
	    </code>
            <input_type>int</input_type>
            <output_type>int</output_type>
        </sample>
        <sample>
            <path>
                <dir>min</dir>
            </path>
            <comment>incorrectly filter out invalid input</comment>
            <flaws>
                <flaw flaw_type="KK" safe="" unsafe=""/>
            </flaws>
            <imports>
              <import>sys</import>
            </imports>
            <code>
	      if {{in_var_name}} &lt; 0 or {{in_var_name}} &gt; 10:
	      INDENT
	          print('Bad value')
	          sys.exit(0)
	      DEDENT
	      {{out_var_name}} = {{in_var_name}}
	    </code>
            <input_type>int</input_type>
            <output_type>int</output_type>
        </sample>
        <sample>
            <path>
		<dir>no_bad_shell_chars</dir>
            </path>
            <comment>filter: remove all shell list or pipe operators</comment>
            <flaws>
                <flaw flaw_type="CWE78" safe="1" unsafe="0"/>
            </flaws>
            <imports>
                <import>re</import>
            </imports>
            <code>
	        # remove ||, &amp;&amp;, ;, &amp;, and |
	        pattern = '\|\||&amp;&amp;|[;&amp;|]'
                {{out_var_name}} = re.sub(pattern, '', {{in_var_name}})
            </code>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

<!--
        <sample>
            <path>
                <dir>invalid_filenames_chars_path</dir>
            </path>
            <comment>filtering : remove all invalid filenames and chars in paths</comment>
            <flaws>
                <flaw flaw_type="CWE22" safe="1" unsafe="0"/>
            </flaws>
            <imports>
                <import>System.IO</import>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <code>
                string regexSearch = new string(Path.GetInvalidFileNameChars()) + new string(Path.GetInvalidPathChars());
                Regex r = new Regex(string.Format("[{0}]", Regex.Escape(regexSearch)));
                {{out_var_name}} = r.Replace({{in_var_name}}, "");
            </code>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>regex_parent_dir_path</dir>
            </path>
            <comment>filtering : remove first "../" in path</comment>
            <flaws>
                <flaw flaw_type="CWE22" safe="0" unsafe="0"/>
            </flaws>
            <imports>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <code>
                string pattern = "^\\.\\.\\/";
                Regex r = new Regex(pattern);
                {{out_var_name}} = r.Replace({{in_var_name}}, "");
            </code>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>

        <sample>
            <path>
                <dir>good_regex_parent_dir_path</dir>
            </path>
            <comment>filtering : remove all "../" in path</comment>
            <flaws>
                <flaw flaw_type="CWE22" safe="1" unsafe="0"/>
            </flaws>
            <imports>
                <import>System.Text.RegularExpressions</import>
            </imports>
            <code>
                string pattern = "^[\\.\\.\\/]+";
                Regex r = new Regex(pattern);
                {{out_var_name}} = r.Replace({{in_var_name}}, "");
            </code>
            <input_type>string</input_type>
            <output_type>string</output_type>
        </sample>
-->
    </filtering>
