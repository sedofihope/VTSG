<?xml version = "1.0" standalone="no"?>
<!DOCTYPE root SYSTEM "../dtd/complexities.dtd">
<!-- *created  "Fri Jan 19 16:44:33 2024" *by "Paul E. Black" -->
<!-- *modified "Tue Feb 13 10:12:03 2024" *by "Paul E. Black" -->
<root>
    <conditions>
        <!--
        <condition id="">
            <code></code>
            <value></value>
        </condition>
        -->
	<!-- test purpose: condition with no import -->
        <condition id="2">
            <code>1==0</code>
            <value>False</value>
        </condition>

	<!-- test purpose: condition with an import -->
        <condition id="5">
	    <imports>
	      <import>math</import>
	    </imports>
            <code>(math.pow(4, 2)&lt;=42)</code>
            <value>True</value>
        </condition>

    </conditions>

    <complexities>
        <!--
        <complexity id="" type="" group="" executed="" in_out_var="i" indirection="" need_id="">
            <code></code>
            <body></body>
        </complexity>
        -->
        <!-- Conditional branching -->
        <!-- if statements-->

	<!-- test purpose: complexity with two imports -->
        <complexity id="1" type="if" group="conditionals" executed="condition">
	    <imports>
	      <import>random</import>
	      <import>string</import>
	    </imports>
            <code>
	      # use Python random and string to test imports.  Both tests are False
	      # so they are evaluated, but don't affect the value of the condition.
              if random.randint(0, 100) &gt; 200 or 'A' in string.digits or {{condition}}:
	      INDENT
                  {{ placeholder }}
	      DEDENT
            </code>
        </complexity>

	<!-- test purpose: complexity that does NOT import anything -->
        <complexity id="13" type="switch" group="conditionals" executed="1">
            <code>
	match 7:
	INDENT
            case 6:
	    INDENT
                pass
	    DEDENT
            case _:
	    INDENT
                {{ placeholder }}
	    DEDENT
	DEDENT
            </code>
        </complexity>

	<!-- test purpose: body import, that is, library import in <body> -->
        <complexity id="70bi" type="class" group="classes" executed="1" in_out_var="traversal" need_id="1" indirection="1">
	    <imports>
	      <!-- "as module_1" must be generated by VTSG, to get number right -->
	      <import>{{body_file}}</import>
	    </imports>
            <code>
        var_{{id}} = {{body_file}}.{{call_name}}({{in_var_name}})
        {{out_var_name}} = var_{{id}}.get_var_{{id}}()
            </code>
            <body>
'''
{{comments}}
'''
'''
{{ license }}
'''

import collections
{{ stdlib_imports }}

{{static_methods}}

class {{call_name}}:
INDENT
        def __init__(self, {{in_var_name}}_{{id}}):
	INDENT
                self.var_{{id}} = {{in_var_name}}_{{id}}
	DEDENT

        def  get_var_{{id}}(self):
	INDENT
            {{local_var}}
	    # use Python collections to test imports
	    de_queue = collections.deque()
            de_queue.append(self.var_{{id}})
            {{in_var_name}} = de_queue.pop()
            {{ placeholder}}
            return {{out_var_name}}
	DEDENT
DEDENT
            </body>
        </complexity>

	<!-- test purpose: code import, that is, library import where <code> is
	     placed.  Also, both library import and class or module import -->
        <complexity id="70ci" type="class" group="classes" executed="1" in_out_var="traversal" need_id="1" indirection="1">
	    <imports>
	      <import>collections</import>
	      <!-- "as module_1" must be generated by VTSG, to get number right -->
	      <import>{{body_file}}</import>
	    </imports>
            <code>
	      # use Python collections to test imports
	      de_queue = collections.deque()
              de_queue.append({{body_file}}.{{call_name}}({{in_var_name}}))
              var_{{id}} = de_queue.pop()
              {{out_var_name}} = var_{{id}}.get_var_{{id}}()
            </code>
            <body>
'''
{{comments}}
'''
'''
{{ license }}
'''

{{ stdlib_imports }}

{{static_methods}}

class {{call_name}}:
INDENT
        def __init__(self, {{in_var_name}}_{{id}}):
	INDENT
                self.var_{{id}} = {{in_var_name}}_{{id}}
	DEDENT

        def  get_var_{{id}}(self):
	INDENT
            {{local_var}}
            {{in_var_name}} = self.var_{{id}}
            {{ placeholder}}
            return {{out_var_name}}
	DEDENT
DEDENT
            </body>
        </complexity>
    </complexities>
</root>
<!-- end of complexities.xml -->
