<?xml version="1.0" standalone="no"?>
<!DOCTYPE sink SYSTEM "../dtd/sink.dtd">
<!-- *created  "Fri Apr 14 09:31:25 2023" *by "Paul E. Black" -->
<!-- *modified "Fri Apr 14 11:54:47 2023" *by "Paul E. Black" -->
    <sink>
        <sample>
            <path>
                <dir>file_exists</dir>
            </path>
            <flaw_type flaw_group="OWASP_a4">CWE_22</flaw_type>
            <comment>sink: check if a file exists</comment>
            <imports>
                <import>os</import>
            </imports>
            <code>
	      {{flaw}}
              os.path.exists({{in_var_name}})
	    </code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>file_exists</dir>
            </path>
	    <!-- Use SEI CERT flaw name -->
            <flaw_type flaw_group="OWASP_a4">IDS00-PL</flaw_type>
            <comment>sink: check if a file exists</comment>
            <imports>
                <import>os</import>
            </imports>
            <code>
	{{flaw}}
        os.path.exists({{in_var_name}})</code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>ls</dir>
            </path>
	    <!-- different group, same flaw type as above -->
            <flaw_type flaw_group="Zarahemla">CWE_22</flaw_type>
            <comment>sink: run ls in a dir</comment>
            <imports>
                <import>os</import>
            </imports>
            <code>
        {{flaw}}
        os.system('ls ' + {{in_var_name}});
            </code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>pass</exec_type>
        </sample>

        <sample>
            <path>
                <dir>file_exists</dir>
            </path>
	    <!-- missing flaw_group -->
            <flaw_type>OWASP_A01</flaw_type>
	    <!-- no <comment></comment> -->
            <imports>
                <import>os</import>
            </imports>
            <code>
        print(f'file "{ {{in_var_name}} }" ', end='')
        {{flaw}}
        if os.path.exists({{in_var_name}}):
	INDENT
            print('exists')
	DEDENT
	else:
	INDENT
            print('does not exist')
	DEDENT
	    </code>
            <safety safe="0" unsafe="0"/>
            <input_type>string</input_type>
            <exec_type>none</exec_type>
        </sample>

        <sample>
            <path>
                <dir>info_expose</dir>
            </path>
            <flaw_type flaw_group="OWASP_a5">CWE_209</flaw_type>
            <comment>sink: information exposure</comment>
            <imports>
            </imports>
            <code>
	        # find a sum that the compiler won't predict
                intArray = sorted([2, 37, 849, 24, 42, -10, 93])
		for nb in intArray:
		INDENT
                    r = nb + 3
                    num = r / 10
                    sum = num + nb
                    print(f'Current sum: {sum}')
		DEDENT
                try:
		INDENT
                    a = 0
                    b = 1
		    # sum is a float, so range(sum) throws TypeError
                    for i in range(sum):
		    INDENT
		        (a, b) = (b, a + b)
		    DEDENT
                    print(f'{sum}th Fibonacci number is {a}')
		DEDENT
                except TypeError as te:
		INDENT
                    {{flaw}}
                    print(f'TypeError: {te}: for i in range({sum}):') # leaks value of sum
		DEDENT
            </code>
            <safety safe="0" unsafe="1"/>
	    <!-- no input (or filter) needed -->
            <input_type>none</input_type>
            <exec_type>none</exec_type>
        </sample>

    </sink>
