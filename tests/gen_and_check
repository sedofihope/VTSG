# *created  "Mon Feb 14 08:46:21 2022" *by "Paul E. Black"
# *modified "Wed Sep 28 15:56:35 2022" *by "Paul E. Black"

# Generate the requested vulnerability test suite and check the result

# VTSG produces three kinds of outputs:
#  1. the generated test cases
#  2. manifest files (lists of those cases)
#  3. a generation report: how many of what were generated
# This script runs VTSG then checks each against the expected files.
# For Python, it also executes the generated programs to make sure they are valid.

# Usage:
help_message="$ tests/gen_and_check {py,cs,php}"

if [ $# != 1 ]
then
    echo expecting one command line argument
    echo $help_message
    exit -1
fi

lang=$1
# determine the name of the language directory (LD)
if [ $lang == py ]
then
    LD=Python
elif [ $lang == cs ]
then
    LD=Csharp
elif [ $lang == php ]
then
    LD=PHP
else
    echo unknown language: $lang
    exit -1
fi

# Time Stamp (nearly) matches name that VTGS will choose for the TestSuite
#    note: since time may differ by a second, names may differ
TimeStamp=$(date +"%m-%d-%Y_%Hh%Mm%S")
# choose a name for Photo file, which captures the output
PF="TestPhoto_${TimeStamp}_${LD}_photo"
# choose a name for Check file, which saves diff outputs
CF="TestPhoto_${TimeStamp}_${LD}_check"
# choose a name for Execute file, which saves execution results
EF="TestPhoto_${TimeStamp}_${LD}_exec"

# run VTSG and capture its output (generation report)
echo running vtsg.py -l $lang ...
python3 vtsg.py -l $lang 2>&1 | tee ${PF}

# determine what the TestSuite directory was named
TSD=$(ls -dt TestSuite_*/${LD} | head -1)
echo ${TSD}

# check that the outputs match
echo checking that VTSG outputs match | tee -a ${CF}
diff ${PF} tests/${LD}_photo 2>&1 | tee -a ${CF}

# test directory, relative to the new TestSuite... directory
TDIR="../../tests"

# check that generated files match
echo checking that generated files match ... | tee -a ${CF}
(cd ${TSD};for f in $(find . -name "*.${lang}"); do cmp $f ${TDIR}/${LD}/$f;done) 2>&1 | tee -a ${CF}

# check that the manifests match
echo checking manifests | tee -a ${CF}
(cd ${TSD};for m in $(find . -name "manifest.xml"); do echo $m;${TDIR}/cmp_manifests.py $m ${TDIR}/${LD}/$m;done) 2>&1 | tee -a ${CF}

if [ $LD != Python ]
then
    exit
fi

# only run Python files, for now at least

echo executing generated files ... | tee -a ${CF}
(cd ${TSD}
# execute each test case
for f in $(find . -name "*.py"|grep -v b[.]|sort); do
    echo $f
    # determine the attack based on the sink
    if [[ $f =~ __S_file_exists__ ]]; then
        # file existence can leak information about system type. /Users is a Mac
        a=/Users
    elif [[ $f =~ __S_ls__ ]]; then
    	# semicolon allows user to run arbitrary command, in this case echo
        a="-d /;echo Vulnerable: user command run"
    else
        exit
    fi
    # class cases are not valid code currently; don't execute them
    if [[ $f =~ -2[012] ]]; then
        echo Class case - do not execute
        continue
    fi
    # timeout in order to limit infinite loops
    echo "$a" | gtimeout 3 python $f "$a"
done) 2>&1 | tee ${EF}
echo checking that execution is as expected | tee -a ${CF}
diff ${EF} tests/${LD}_exec 2>&1 | tee -a ${CF}

# end of gen_and_check
