#!/bin/sh
if [ -z $RESHELLING ]
then
    # find bash on this machine and run with it instead
    export RESHELLING=1 # remember that we're running in the right shell
    $(which bash) "$0" "$@"
    exit
fi
# *created  "Mon Feb 14 08:46:21 2022" *by "Paul E. Black"
# *modified "Wed Feb 28 13:49:46 2024" *by "Paul E. Black"

# Generate the requested vulnerability test suite and check the result

# VTSG produces three kinds of outputs:
#  1. the generated test cases
#  2. manifest files (lists of those cases)
#  3. a generation report: how many of what were generated
# This script runs VTSG then checks each against the expected files.
# For Python, it also executes the generated programs to make sure they are valid.

# Usage:
help_message="Usage: tests/gen_and_check [-f FLAW]* {py,cs,php}"

while getopts ":f:" flag; do
    case ${flag} in
      f)
	flaws="-f $OPTARG $flaws"
	;;
      :)
	echo Must supply an argument to -$OPTARG
	echo $help_message
	exit -1
	;;
      *)
	echo Invalid option: -$OPTARG
	echo $help_message
	exit -1
	;;
    esac
done
shift $((OPTIND-1))
if [ $# != 1 ]
then
    echo expecting one command line argument
    echo $help_message
    echo The first argument is the -l option passed to vtsg.
    exit -1
fi

lang=$1

# Time Stamp (nearly) matches name that VTSG will choose for the TestSuite
#    note: since time may differ by a second, names may differ
TimeStamp=$(date +"%m-%d-%Y_%Hh%Mm%S")
# choose a name for Photo file, which captures the output
PF="TestPhoto_${TimeStamp}_photo"
# choose a name for Check file, which saves diff outputs
CF="TestPhoto_${TimeStamp}_check"
# choose a name for Execute file, which saves execution results
EF="TestPhoto_${TimeStamp}_exec"

# run VTSG and capture its output (generation report)
echo running vtsg.py ${flaws} -l $lang ...
python3 vtsg.py ${flaws} -l $lang 2>&1 | tee ${PF}
exitStatus=${PIPESTATUS[0]} # get exit status of first process in pipe
if [[ $exitStatus != 0 ]];
then
    exit $exitStatus
fi

# guess what VTSG named the TestSuite directory, e.g., the latest TestSuite directory
LTSD=$(ls -dt TestSuite_* | head -1)
# determine the language directory from the TestSuite
LD=$(ls $LTSD)

TSD=$LTSD/$LD
echo ${TSD}

if [ "$flaws" == "" ]
then
    # check that the outputs match
    echo checking that VTSG outputs match | tee -a ${CF}
    diff ${PF} tests/${LD}_photo 2>&1 | tee -a ${CF}
fi

# test directory, relative to the new TestSuite... directory
TDIR="../../tests"

# check that generated files match
echo checking that generated files match ... | tee -a ${CF}
CMP=diff # diff doesn't report the names of files that don't match
CMP=cmp
(cd ${TSD};for f in $(find . -name "*.${lang}"); do ${CMP} $f ${TDIR}/${LD}/$f;done) 2>&1 | tee -a ${CF}

if [ "$flaws" == "" ]
then
    # check that the manifests match
    echo checking manifests | tee -a ${CF}
    (cd ${TSD};for m in $(find . -name "manifest.xml"); do echo $m;python3 ${TDIR}/cmp_manifests.py $m ${TDIR}/${LD}/$m;done) 2>&1 | tee -a ${CF}
fi

if [ $LD != Python ]
then
    exit
fi

# only run Python files, for now at least

# figure out which timeout command to use
if [ ! -z $(which timeout) ]
then
    TIMEOUT="$(which timeout) 3"
elif [ ! -z $(which gtimeout) ]
then
    TIMEOUT="$(which gtimeout) 3"
else
    TIMEOUT=""
fi


echo executing generated files ... | tee -a ${CF}
(cd ${TSD}
# execute each test case
for f in $(find . -name "*.py"|grep -v b[.]|sort); do
    echo $f
    # determine the attack based on the sink
    if [[ $f =~ __S_file_exists__ ]]; then
        # file existence can leak information about system type. /Users is a Mac
        a=/Users
    elif [[ $f =~ __S_ls__ ]]; then
    	# semicolon allows user to run arbitrary command, in this case echo
        a="-d /;echo Vulnerable: user command run"
    elif [[ $f =~ __S_info_expose__ ]]; then
	# no attack needed
	a=""
    elif [[ $f =~ __S_unchecked_loop[GB]__ ]]; then
	# number larger than 5
	a="6"
    elif [[ $f =~ __S_div_zero__ ]]; then
	# zero as divisor
	a="0"
    elif [[ $f =~ __S_rel_path_trav__ ]]; then
	# unlimited file path access
	a="../etc/passwd"
    elif [[ $f =~ __S_ext_sys_ctl__ ]]; then
	# CWE-15: unlimited Python module search path
	a="."
    elif [[ $f =~ __S_index__ ]]; then
	# CWE-129: improper validation of array index
	a="-6"
    elif [[ $f =~ __S_K[^_]+__ ]]; then
	# Kratkiewicz: deliberate validation of array index
	a="10"
    else
	echo UNKNOWN SINK IN $f
	echo ADD IT TO tests/gen_and_check
        exit
    fi

    # save attack in file if input is from file
    if grep -q 'input.*: file ' $f; then
	# file name follows the "file" keyword
	fileName=$(grep 'input.*: file ' $f | perl -pwe 's/.* file ([^ ]+).*/$1/')
	rm -f $fileName # make sure nothing is left over
	echo "$a" > $fileName
    fi

    # timeout in order to limit infinite loops
    #    ignore the result of /Users check so MacOS and non-MacOS systems match
    #    ignore path and exact name of TestSuite_, which occur in traces
    echo "$a" | (export ADD="$a";$TIMEOUT python3 $f "$a")
done) 2>&1 | perl -pwe 's/Users".*/Users" .../;s|File ".*(TestSuite_)[^/]*|...$1...|' | tee ${EF}
if [ "$flaws" == "" ]
then
    echo checking that execution is as expected | tee -a ${CF}
    diff ${EF} tests/${LD}_exec 2>&1 | tee -a ${CF}
fi

# end of gen_and_check
